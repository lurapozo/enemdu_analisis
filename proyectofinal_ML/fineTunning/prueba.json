{"prompt":"Un arreglo es","completion":"estructura de datos que contiene una serie de elementos de un mismo tipo. En Python se crean con la función np.array de la librería de numpy: a = np.array([1, 2, 3])"}
{"prompt":"Como accedo a un elemento de un arreglo?","completion":"Se accede de la misma forma que una lista, especificando la posición del elemento que quieres acceder en el arreglo. lista[2] accede al tercer elemento>>"}
{"prompt":"Una matriz es","completion":"conjunto de vectores por lo que tiene múltiples dimensiones, también es una estructura de datos. Lo pueden pensar como un arreglo de arreglos o una lista de listas. matriz = [[1, 2, 3], [4, 5, 6]]"}
{"prompt":"Como se accede a un elemento de una matriz?","completion":"Es similar a acceder a un arreglo, la diferencia es que, al ser de varias dimensiones, se tiene que especificar la posición del elemento que quieres en todas esas posiciones, su posición x, y, z, etcetera. matriz[fila][columna] Usualmente se trabajan con matrices de 2 dimensiones, ahí se pone primero se dice la posición del elemento en la fila y luego en la columna."}
{"promt":"Hay una diferencia entre arreglo y lista?","completion":"Sí, los elementos de una lista pueden ser de diferente tipo. Una lista puede tener un integer y un string. Pero los elementos de un arreglo deben ser del mismo tipo, todos integer, o todos string, por dar un ejemplo."}
{"promt":"Por que usar arreglos en vez de una lista?","completion":"Los arreglos guardan la información de manera más eficiete, por lo que son mejores para guardar muchos datos. Pero la parte más importante es que con ellos puedes realizar operaciones matemáticas más rápidas. Por ejemplo puedes dividir todos los valores de un arreglo sin iterar Por ejemplo, si dividen un arreglo para 2 no les va a salir error, pero si tratan de realizar la misma operacion pero con una lista en vez un arreglo les va a salir error, porque las listas no pueden realizar este tipos de operaciones. Deberían hacer un for en ese caso."}
{"prompt": "Crear arreglos", "completion": "Para crear arreglos primero se necesita la librería de numpy import numpy as np así se importa esta librería.  Ahora ya podemos crear arreglos. Se puede usar np array para transformar una lista en un arreglo como a = np.array([1, 2, 3]). También se pueden crear arreglos de números aleatorios con np.random.randint como np.random.randint(100, size=(3)). Este comando crea un arreglo del tamaño 3 con valores aleatorios entre el 0 y el 100. También se puede usar np arange para crear un arreglo con valores de un intervalo np.arange(0, 5). En este caso va a dar un arreglo con valores del 0 al 4 ya que no incluye el último valor."}
{"promt":"Crear matrices", "completion":" Se pueden crear matrices si se escriben listas dentro de otra lista. Pero es mejor volverla una matriz de arreglos con la librería de numpy. como listas = [[1, 2, 3], [4, 5, 6]]matriz = np.array(listas). También se pueden crear matrices de números aleatorios con np random randint np.random.randint(100, size=(3, 3)). Este comando crea una matriz de 3 columnas y 3 filas con valores aleatorios entre el 0 y el 100. np zeros puede ser usado para crear una matriz de ceros np.zeros([2, 3]). Este comando crea una matriz de ceros de 2 filas y 3 columnas. También se puede usar np ones para crear matrices de unos. np.ones([4, 5]). Este comando crea una matriz de ceros de 4 filas y 5 columnas. Se puede transformar un arreglo en una matriz con el comando reshape arr = np.arange(0, 6)matriz = arr.reshape(2, 3). Transforma el arreglo en una matriz de 2 filas y 3 columnas"}
{"prompt":"¿Qué imprime el siguiente código? Justifique su respuesta  import numpy as np  = np.array([8,3,7,1,5,2,6,4])  d = ''vwxyz''  p = ''  for a in range(arr[arr < 5].size):   p += d[a] * a  print(p)","completion":"arr[arr < 5] filtra los valores en arr que son menores que 5 y devuelve [3, 1, 2, 4].  arr[arr < 5].size devuelve el número de elementos en el resultado anterior, que es 4.  Luego, el bucle for itera sobre estos elementos 4 veces.  En cada iteración, a toma el valor actual del elemento en arr[arr < 5]. En la primera iteración, a es 0, en la segunda es 1, en la tercera es 2 y en la cuarta es 3.  p += d[a] * a agrega a la cadena p el carácter en la posición a de la cadena d multiplicado por a. Entonces, para cada iteración, se agrega un número de caracteres a la cadena p igual al valor de a.  El resultado será una cadena que contiene caracteres duplicados según el valor de a en cada iteración del bucle. Aquí está lo que se imprimirá:  wxxyyy"}
{"prompt":"Indique la salida por pantalla del siguiente código. Justifique su respuesta.  import numpy as np  vector = np.array([1, 5, 6, 6, 5, 2, 1, 3, 7, 9, 0, 0, 1, 4, 8])  print(np.unique(vector[vector % 2 == 0]).size)", "completion":"Define un array NumPy llamado vector con los valores [1, 5, 6, 6, 5, 2, 1, 3, 7, 9, 0, 0, 1, 4, 8].  Luego, filtra los elementos pares de vector usando vector % 2 == 0, lo que da como resultado [6, 6, 2, 0, 0, 4, 8].  Aplica np.unique() para obtener los valores únicos en el array filtrado anterior. Esto elimina los duplicados y devuelve [6, 2, 0, 4, 8].  Finalmente, se llama a .size para obtener el número de elementos en el array resultante, que es 5."}
{"prompt":"¿Qué imprime el siguiente código? Justifique su respuesta  import numpy as np  letters = np.array(['A','Z','P','B','E','R','O','M','B','A','C','D','Q','O'])  indexes = np.array([54, 23, 60, 13, 29, 65, 31, 23, 30, 99, 19, 89, 10, 56])  nl = letters[indexes >= 30]  res = {}  for x in nl:   res[x] = res.get(x, 0) + 1  print(res)", "completion":"Se define un array NumPy llamado letters que contiene letras como caracteres y otro array NumPy llamado indexes que contiene números enteros.  Se crea un nuevo array nl seleccionando solo las letras en letters que corresponden a índices en indexes que son mayores o iguales a 30. Esto resulta en el array nl con los elementos ['A', 'P', 'R', 'O', 'B', 'D', 'O'].  Se inicializa un diccionario vacío llamado res que se utilizará para contar la frecuencia de cada letra.  Se recorre el array nl en un bucle for. En cada iteración, se incrementa el contador para esa letra en el diccionario res. Si la letra no existe en el diccionario, se inicializa con un valor de 0 antes de incrementarlo.  Finalmente, se imprime el diccionario res, que contiene la frecuencia de cada letra en el array nl."}
{"prompt":"¿Qué imprime el siguiente código? Justifique su respuesta  import numpy as np  L = [10,12,11,4,8]  M = [4,2,1,2,7]  matriz = np.array([],int)  A = np.append(matriz,L[2:4])  B = np.append(A,M[1:3]).reshape((2,2))  C = (A * B)//2  print(C)","completion":"Se importa NumPy como np.  Se definen las listas L y M con los siguientes valores:  L = [10, 12, 11, 4, 8]  M = [4, 2, 1, 2, 7]  Se crea una matriz vacía matriz utilizando NumPy.  Se utiliza np.append() para agregar elementos de la lista L desde la posición 2 hasta la 4 (exclusiva) a la matriz A. Esto resulta en A = [11, 4].  Se utiliza nuevamente np.append() para agregar elementos de la lista M desde la posición 1 hasta la 3 (exclusiva) a la matriz A, y luego se redimensiona la matriz resultante a una forma (shape) de (2, 2) y se almacena en B. Esto resulta en: B = [[11  4]   [ 2  1]]    Luego, se realiza la multiplicación de elemento por elemento entre las matrices A y B, y se divide cada resultado por 2 para crear la matriz C.   C = [[60  8]   [11  2]]    Se imprime C"}
{"prompt":"¿Qué imprime el siguiente código? Justifique su respuesta  import numpy as np  matriz = np.array([['h', 'o', 'l', 'a'], ['m', 'u', 'n', 'd'], ['o', 'E', 'S', 'P'], ['O', 'L', ':', ')']])  f,c = matriz.shape  t = ''  for j in range(c):   t = t + ''.join(matriz[:,j].tolist())  print(t)", "completion":"Se obtienen las dimensiones de la matriz matriz en las variables f (filas) y c (columnas). En este caso, f será igual a 4 y c será igual a 4.  Se inicializa una cadena vacía t que se utilizará para almacenar el resultado final.  Se realiza un bucle for que itera a través de las columnas (j) de la matriz.  Dentro del bucle, se utiliza .tolist() para convertir la columna actual en una lista de caracteres y luego se usa join para concatenar esos caracteres en una sola cadena.  Se agrega la cadena resultante al final de la cadena t.  Al final del bucle, la cadena t contiene la concatenación de los caracteres por columnas de la matriz.  Se imprime la cadena t  hmoOouELlnS:adP)"}
{"prompt":"Se tiene un diccionario como este {'Guayaquil': {'robo vehiculo':605, 'asalto':6345,...}, 'Cuenca': {'robo vehiculo':123, 'asalto':676,...}, ...} cree la funcion crearMatriz() para retornanar una matriz de Numpy con la informacion del diccionario.","completion":"import numpy as np  def crearMatriz(data_dict):   # Obtener las ciudades y los tipos de delitos   ciudades = list(data_dict.keys())   delitos = list(data_dict[ciudades[0]].keys())   # Inicializar una matriz de ceros con las dimensiones adecuadas    matriz = np.zeros((len(ciudades), len(delitos)))   # Llenar la matriz con los datos del diccionario   for i, ciudad in enumerate(ciudades):    for j, delito in enumerate(delitos):     matriz[i, j] = data_dict[ciudad].get(delito, 0)   return matriz  # Ejemplo de uso  data_dict = {   'Guayaquil': {'robo vehiculo': 605, 'asalto': 6345},   'Cuenca': {'robo vehiculo': 123, 'asalto': 676}  matriz_resultante = crearMatriz(data_dict)  print(matriz_resultante)"}
{"prompt": "¿Cuál es el resultado del siguiente código en Python? Justifica tu respuesta.  import numpy as np  matriz = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])  suma_fila_2 = sum(matriz[1, :])  multiplicacion_columna_3 = np.prod(matriz[:, 2])  resultado = suma_fila_2 * multiplicacion_columna_3  print(resultado)", "completion": "El código crea una matriz NumPy de 3x3 y luego realiza operaciones en esa matriz.  - `suma_fila_2` calcula la suma de los elementos en la segunda fila de la matriz, que es 4 + 5 + 6 = 15.  - `multiplicacion_columna_3` calcula el producto de los elementos en la tercera columna de la matriz, que es 3 * 6 * 9 = 162.  - `resultado` multiplica el valor de `suma_fila_2` por `multiplicacion_columna_3`, lo que da como resultado 15 * 162 = 2430.  Por lo tanto, el resultado que se imprimirá será 2430."}
{"prompt": "¿Qué imprime el siguiente código en Python? Justifica tu respuesta.  import numpy as np  arr = np.array([5, 10, 15, 20, 25])  result = ''  for num in arr:   result += str(num * 2) + ' '  print(result)", "completion": "El código comienza importando la biblioteca NumPy y crea un array llamado 'arr' con los valores [5, 10, 15, 20, 25]. Luego, inicializa una cadena vacía 'result'.   Después, entra en un bucle 'for' que itera a través de los elementos de 'arr'. En cada iteración, multiplica el número por 2, convierte el resultado en una cadena y lo agrega a 'result' con un espacio.   El resultado impreso será una cadena que contiene los números en 'arr' multiplicados por 2 y separados por espacios. Aquí está lo que se imprimirá:  '10 20 30 40 50 '"}
{"prompt": "¿Qué imprime el siguiente código en Python? Justifica tu respuesta.  import numpy as np  matriz = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])  promedio_fila_1 = np.mean(matriz[0, :])  suma_columna_2 = np.sum(matriz[:, 1])  resultado = promedio_fila_1 + suma_columna_2  print(resultado)", "completion": "El código comienza importando la biblioteca NumPy y crea una matriz 'matriz' de 3x3.   Luego, realiza operaciones en la matriz:  - 'promedio_fila_1' calcula el promedio de los elementos en la primera fila de la matriz, que es (1 + 2 + 3) / 3 = 2.0.  - 'suma_columna_2' calcula la suma de los elementos en la segunda columna de la matriz, que es 2 + 5 + 8 = 15.  - 'resultado' suma el valor de 'promedio_fila_1' y 'suma_columna_2', dando como resultado 2.0 + 15 = 17.0.   Por lo tanto, el resultado que se imprimirá será 17.0."}
{"prompt": "¿Qué valor tiene la variable 'elementos' después de ejecutar el siguiente código? Justifica tu respuesta.  import numpy as np  matriz = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])  elementos = matriz[1:3, 0:2]", "completion": "El código crea una matriz 'matriz' de 3x3 y luego selecciona un subconjunto de elementos utilizando la notación de segmentación.   'matriz[1:3, 0:2]' selecciona las filas 1 y 2 (exclusiva) y las columnas 0 y 1 (exclusiva) de la matriz 'matriz'. Esto resulta en una submatriz que contiene los siguientes elementos:  [[40 50]   [70 80]]   Por lo tanto, la variable 'elementos' contendrá esta submatriz."}
{"prompt": "Escribe un código en Python utilizando NumPy para crear una matriz de 3x3 con todos los elementos iguales a 5. Luego, calcula la suma de todos los elementos de la matriz.", "completion": "import numpy as np  matriz = np.full((3, 3), 5)  suma_total = np.sum(matriz)  print(suma_total)"}
{"prompt": "Dada una matriz NumPy 'A' de 3x3, escribe un código para encontrar el valor máximo en la matriz y su posición (fila y columna).", "completion": "import numpy as np  A = np.array([[10, 20, 30], [5, 15, 25], [8, 18, 28]])  valor_maximo = np.max(A)  posicion_maximo = np.unravel_index(np.argmax(A), A.shape)  print('Valor máximo:', valor_maximo)  print('Posición del máximo:', posicion_maximo)"}
{"prompt": "Escribe un código en Python utilizando NumPy para calcular el producto escalar entre dos vectores 'v' y 'w'. Luego, imprime el resultado.", "completion": "import numpy as np  v = np.array([1, 2, 3])  w = np.array([4, 5, 6])  producto_escalar = np.dot(v, w)  print('Producto escalar:', producto_escalar)"}
{"prompt": "Dada una matriz NumPy 'B' de 4x4, escribe un código para calcular la suma de cada fila y almacenar los resultados en un array NumPy. Luego, imprime el array de sumas de filas.", "completion": "import numpy as np  B = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])  sumas_filas = np.sum(B, axis=1)  print('Sumas de filas:', sumas_filas)"}
{"prompt": "Escribe un código en Python utilizando NumPy para crear una matriz identidad de 5x5 y luego cambiar todos los elementos de la diagonal principal a 2. Luego, imprime la matriz resultante.", "completion": "import numpy as np  matriz_identidad = np.eye(5)  matriz_identidad[np.arange(5), np.arange(5)] = 2  print(matriz_identidad)"}
{"prompt": "Escribe un código en Python utilizando NumPy para crear una matriz de 4x4 con números enteros aleatorios entre 1 y 10. Luego, calcula la media de todos los elementos de la matriz.", "completion": "import numpy as np  matriz = np.random.randint(1, 11, (4, 4))  media = np.mean(matriz)  print('Media de la matriz:', media)"}
{"prompt": "Dada una matriz NumPy 'C' de 3x3, escribe un código para encontrar la suma de los elementos en cada columna y almacenar los resultados en un array NumPy. Luego, imprime el array de sumas de columnas.", "completion": "import numpy as np  C = np.array([[2, 4, 6], [1, 3, 5], [7, 8, 9]])  sumas_columnas = np.sum(C, axis=0)  print('Sumas de columnas:', sumas_columnas)"}
{"prompt": "Escribe un código en Python utilizando NumPy para crear una matriz diagonal de 3x3 con los valores 2, 4 y 6 en la diagonal principal. Luego, imprime la matriz resultante.", "completion": "import numpy as np  valores_diagonal = np.array([2, 4, 6])  matriz_diagonal = np.diag(valores_diagonal)  print(matriz_diagonal)"}
{"prompt": "Escribe un código en Python utilizando NumPy para multiplicar una matriz 'D' de 2x3 por un vector 'v' de 3 elementos. Luego, imprime el resultado.", "completion": "import numpy as np  D = np.array([[1, 2, 3], [4, 5, 6]])  v = np.array([2, 3, 4])  resultado = np.dot(D, v)  print('Resultado de la multiplicación:', resultado)"}
{"prompt": "Dada una matriz NumPy 'E' de 5x5, escribe un código para encontrar los valores únicos en la matriz y contar cuántas veces aparece cada valor único.", "completion": "import numpy as npE = np.array([[1, 2, 2, 3, 4], [2, 3, 4, 5, 6], [1, 2, 2, 3, 4], [7, 8, 9, 1, 2], [1, 2, 2, 3, 4]])valores_unicos, cuentas = np.unique(E, return_counts=True)diccionario_cuentas = dict(zip(valores_unicos, cuentas))print('Valores únicos:', valores_unicos)print('Conteo de valores únicos:', diccionario_cuentas)"}
{"prompt": "Lee el siguiente código en Python que utiliza NumPy y explica qué hace y cuál será la salida por pantalla.    ```python  import numpy as np  matriz = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])  suma_fila_2 = sum(matriz[1, :])  multiplicacion_columna_3 = np.prod(matriz[:, 2])  resultado = suma_fila_2 * multiplicacion_columna_3  print(resultado)  ```  ", "completion": "Este código comienza importando la biblioteca NumPy y crea una matriz 'matriz' de 3x3. Luego, realiza las siguientes operaciones:    - 'suma_fila_2' calcula la suma de los elementos en la segunda fila de la matriz, que es 4 + 5 + 6 = 15.  - 'multiplicacion_columna_3' calcula el producto de los elementos en la tercera columna de la matriz, que es 3 * 6 * 9 = 162.  - 'resultado' multiplica el valor de 'suma_fila_2' por 'multiplicacion_columna_3', lo que da como resultado 15 * 162 = 2430.    La salida por pantalla será:    ```  2430  ```  Este es el resultado de la multiplicación de la suma de la segunda fila por la multiplicación de la tercera columna de la matriz."}
{"prompt": "Lee el siguiente código en Python que utiliza NumPy y explica qué hace y cuál será la salida por pantalla.    ```python  import numpy as np  A = np.array([[3, 1, 4], [1, 5, 9], [2, 6, 5]])  B = np.array([2, 7, 1])  C = np.dot(A, B)  print(C)  ```  ", "completion": "Este código comienza importando la biblioteca NumPy y crea una matriz 'A' de 3x3 y un vector 'B' de 3 elementos. Luego, realiza las siguientes operaciones:    - 'C' es el resultado de la multiplicación de matriz-vector entre 'A' y 'B'. Esto significa que se realiza una multiplicación de matriz estándar, donde cada fila de 'A' se multiplica por 'B' y se suma el resultado. El resultado es un nuevo vector con 3 elementos.    La salida por pantalla será el contenido de 'C', que es el resultado de la multiplicación de matriz-vector y dependerá de los valores de 'A' y 'B', que en este caso es [17 46 51]"}
{"prompt": "Escriba un programa en Python que implemente el 'Juego de las Ruedas'. Para esto genere aleatoriamente una lista de 12 elementos donde cuatro elementos deben decir 'Rueda' y los otros ocho deben decir 'X'. Luego el programa deberá pedirle al jugador que ingrese por teclado índices entre 0 y 11 (validar). Asuma que el jugador siempre ingresa índices distintos. Si el índice ingresado por el usuario corresponde al de una 'Rueda', gana $1000. El jugador tiene seis intentos para hallar las cuatro 'Ruedas'. En cada intento muestre por pantalla el número total de 'Ruedas' encontradas hasta el momento. Si el jugador encuentra las cuatro 'Ruedas' se gana un carro. El juego termina cuando encuentra las cuatro 'Ruedas' o ha usado todos los intentos. Al final muestre el premio que recibe el jugador (cantidad de dólares o la palabra 'carro' si encontró las cuatro ruedas).    # Respuesta  # se importa la librería random  import random  # Se utiliza el operador * para repetir n veces los valores que están dentro  L = ['Rueda'] * 4 + ['X'] * 8  # Se usa la librería random para asignar aleatoriamente los valores que tiene la lista  random.shuffle(L)  # Se define los intentos que va a tener el usuario  intentos = 6  # se define un acumulador, que obtendrá la suma de las ruedas encontradas  dinero_ganado_acumulado = 0  # Se define un contador, para llevar la cuenta de cuantas ruedas tiene el usuario  ruedas_encontradas = 0  # Se define un bucle while para validar la cantidad de intentos sea diferentes de cero, esto quiere decir que el usuario solo tendrá n intentos definidos en el contador intentos. Finalmente, se valida si el usuario encontró todas las ruedas  while intentos != 0 and ruedas_encontradas != 4:      # Definimos la variable para obtener la entrada del usuario      usuario_numero = 0      # se valida que el número del usuario esté en el rango solicitado      while not (usuario_numero >= 0 and usuario_numero <= 11):          # con la función input se obtiene la entrada del usuario, y con la función int se lo convierte a número entero.          usuario_numero = int(input('Ingrese un número entre el 0 al 11: '))      # Se asigna a la variable resultado, el valor de la posición del elemento de la lista      resultado = L[usuario_numero]      # Se valida si el elemento es la rueda      if resultado == 'Rueda':          print('Encontrada Rueda')          # Se Incrementa $1000 por encontrar la rueda          dinero_ganado_acumulado += 1000          # Se incrementa en 1, por la rueda encontrada          ruedas_encontradas += 1      else:          print('Siga Participando')      # Se resta los intentos      intentos -= 1      print('Número de intentos: ', intentos)  # Se valida si encontró todas las ruedas  if ruedas_encontradas == 4:      print('Carro')  else:      print('Total Dinero Ganado: ', dinero_ganado_acumulado)", "completion": "L = ['Rueda'] * 4 + ['X'] * 8  random.shuffle(L)  intentos = 6  dinero_ganado_acumulado = 0  ruedas_encontradas = 0  while intentos != 0 and ruedas_encontradas != 4:      usuario_numero = 0      while not (usuario_numero >= 0 and usuario_numero <= 11):          usuario_numero = int(input('Ingrese un número entre el 0 al 11: '))      resultado = L[usuario_numero]      if resultado == 'Rueda':          print('Encontrada Rueda')          dinero_ganado_acumulado += 1000          ruedas_encontradas += 1      else:          print('Siga Participando')      intentos -= 1      print('Número de intentos: ', intentos)  if ruedas_encontradas == 4:      print('Carro')  else:      print('Total Dinero Ganado: ', dinero_ganado_acumulado)"}
{"prompt": "¿Qué imprime el siguiente código? Justifique su respuesta  import numpy as np  arr = np.array([8,3,7,1,5,2,6,4])  d = 'vwxyz'  p = ''  for a in range(arr[arr < 5].size):      p += d[a] * a  print(p)", "completion": "El código itera a través de los elementos del array 'arr' que son menores que 5 y realiza una operación en cada iteración. Para cada elemento 'a' en 'arr' que cumple con la condición 'arr < 5', se agrega el carácter en la posición 'a' de la cadena 'd' multiplicado por 'a' a la cadena 'p'. Luego, imprime el valor final de 'p'.    La operación 'p += d[a] * a' implica que para cada elemento en 'arr' menor que 5, se toma el carácter correspondiente de 'd' y se repite 'a' veces, donde 'a' es el valor de ese elemento en 'arr'.    Para el array 'arr' dado, los elementos menores que 5 son [3, 1, 2, 4].    - Cuando 'a' es 3, se toma el carácter 'w' y se repite 3 veces, dando como resultado 'www'.  - Cuando 'a' es 1, se toma el carácter 'v' y se repite 1 vez, dando como resultado 'v'.  - Cuando 'a' es 2, se toma el carácter 'w' y se repite 2 veces, dando como resultado 'ww'.  - Cuando 'a' es 4, se toma el carácter 'x' y se repite 4 veces, dando como resultado 'xxxx'.    Por lo tanto, el valor final de 'p' será 'wwwvwwxxxx'. Esto es lo que se imprimirá."}
{"prompt": "Asuma que tiene una lista con el consumo de datos de las aplicaciones en su celular durante un mes como en el siguiente ejemplo:  junio = ['Facebook-10MB', 'Spotify-55MB', 'Spotify-112MB', 'Whatsapp-12MB', ...]  Observe que las aplicaciones en la lista se pueden repetir.  Muestre por pantalla la cantidad de 'Megas' que ha utilizado durante el mes por cada aplicación.", "completion": "junio = ['Facebook-10MB', 'Spotify-55MB', 'Spotify-112MB', 'Whatsapp-12MB']    # Se declara la lista que contendrá todas las apps  apps = []  # Se declara la lista que contendrá todos los megas consumidos para cada app. Nota: Se usara Lista Hermanas  megas_consumidos = []    # Se recorrer la lista de junio por cada app  for app in junio:      # Se realiza un split() por el caracter -      app_registrada, megas = app.split('-')      # Se valida si no esta registrada es la app      if app_registrada not in apps:          # Si es asi, se lo agrega en la lista          apps.append(app_registrada)          # Y se agrega los megas consumidos          megas_consumidos.append(int(megas.replace('MB', '')))      else:          # Si no, se obtiene el indice          index = apps.index(app_registrada)          # Y finalmente, se incrementa el valor en la lista hermana          megas_consumidos[index] += int(megas.replace('MB', ''))    print('Cantidad de Megas Consumidos: ', sum(megas_consumidos))"}
{"prompt": "La fábrica ACME se encarga de fabricar diversos componentes para vehículos. Para esto, tiene varias líneas de fabricación. Asuma que tiene los siguientes arreglos:  P = np.array(['ct-32', 'mto-990', 'ct-32'...])  PF = np.array([789, 1500, 900 ...])  PD = np.array([26, 35, 70, ...])  D = np.array([300, 12, 100, ...])  CF = np.array([1000, 2000, 1100, ...])  Donde P es un arreglo con los códigos de las piezas fabricadas. El arreglo PF tiene la cantidad total de piezas fabricadas en el día. El arreglo PD indica la cantidad de piezas defectuosas de cada producto por día. El arreglo D indica el día del año de fabricación de la pieza (1 a 365). Finalmente, el arreglo CF indica cuál es la capacidad máxima de productos que se pueden fabricar, para cada tipo de pieza, en un día determinado. Un mismo producto se puede fabricar varias veces al año pero no varias veces en un mismo día.  1. [6 puntos] Escriba una función llamada produccionAnual(codigo, P, PF) que retorne la cantidad total de piezas código fabricadas en el año.  2. [12 puntos] El rendimiento de fabricación de un producto se mide de la siguiente forma:     rendimiento = (total_piezas_fabricadas - total_piezas_defectuosas) / total_capacidad     Escriba la función rendimientoPromedio(codigo, P, PF, PD, CF, D) que retorna el rendimiento promedio diario para codigo. El rendimiento promedio diario es igual a rendimiento / total_días_fabricación.  3. [12 puntos] Escriba la función porcentajeAnualDefecto(codigo, P, PD, PF), que retorna el porcentaje de defectos que tiene un codigo. El porcentaje de defectos se calcula como sigue:     porcentaje_defectos = (total_piezas_defectuosas / total_piezas_fabricadas) * 100  4. [10 puntos] Escriba la función productosDefectuosos(codigos, P, PF, PD, porcentaje), que retorna un arreglo con los códigos de los productos que están en la lista codigos y que tengan un porcentaje de defectos mayor a porcentaje.  5. [10 puntos] Escriba la función maximoPorcentajeDefecto(P, PF, PD), que retorna el código del producto con el mayor porcentaje anual de defectos.", "completion": "import numpy as np    P = np.array(['ct-32', 'mto-990', 'ct-32'])  # Pieza Fabricada  PF = np.array([789, 1500, 900])  # Pieza con novedad o defectuosa  PD = np.array([26, 35, 70])  # Dia del año de fabricación  D = np.array([300, 12, 100])  # Capacidad máxima de productos que se pueden fabricar, cada pieza, en un día  CF = np.array([1000, 2000, 1100])    # Se define la función con los parámetros establecidos en el enunciado    def produccionAnual(codigo, P, PF):      # Se utiliza al máximo la característica de los arrays en numpy, que es el concepto de vector booleano. Devuelve una lista de booleanos con los valores que cumplen la condición      Vbooleano = P == codigo      # Se envía el vector de booleanos al slicing para filtrar y después sumarlos      return sum(PF[Vbooleano])    # Se define la función con los parámetros establecidos en el enunciado    def rendimientoPromedio(codigo, P, PF, PD, CF, D):      # Se aplica la función anterior para calcular el total de PF      totalPF = produccionAnual(codigo, P, PF)      # Se aplica la función anterior para calcular el total de PD      totalPD = produccionAnual(codigo, P, PD)      # Se aplica la función anterior para calcular el total de CF      totalC = produccionAnual(codigo, P, CF)      # Se aplica la fórmula establecida      rendimiento = (totalPF - totalPD) / totalC      # Utiliza indexación booleana para filtrar y contar el total de días      totalDias = D[P == codigo].size      # Se retorna la cantidad deseada del enunciado      return rendimiento / totalDias    # Se define la función con los parámetros establecidos en el enunciado    def porcentajeAnualDefecto(codigo, P, PD, PF):      # Se aplica la función produccionAnual para encontrar totalPD      totalD = produccionAnual(codigo, P, PD)      # Se aplica la función produccionAnual para encontrar totalPF      totalPF = produccionAnual(codigo, P, PF)      # Se retorna el porcentaje con la fórmula establecida      return (totalD / totalPF) * 100    # Se define la función con los parámetros establecidos en el enunciado    def productosDefectuosos(codigos, P, PF, PD, porcentaje):      # Se define la lista para almacenar los productos defectuosos      resultados = []      # Se recorre la lista de codigos      for codigo in codigos:          # Se aplica la función anterior          porcentaje_defectuoso = porcentajeAnualDefecto(codigo, P, PD, PF)          # Se valida si es mayor al porcentaje establecido          if porcentaje_defectuoso > porcentaje:              # Se lo agrega en la lista definida anterior              resultados.append(codigo)      # Se retorna el array      return np.array(resultados)    # Se define la función con los parámetros establecidos en el enunciado    def maximoPorcentajeDefecto(P, PF, PD):      # Se define la lista para almacenar los porcentajes de productos defectuosos      porcentajes = []      # Se recorre la lista      for codigo in P:          # Se añade el porcentaje          porcentajes.append(porcentajeAnualDefecto(codigo, P, PD, PF))      # Se aplica la función argmax, que devuelve el índice mayor      index = np.array(porcentajes).argmax()      # Se retorna el código del producto defectuoso      return P[index]"}
{"prompt": "¿Qué imprime el siguiente código? Justifique su respuesta.   import numpy as np   arr = np.array([3, 2, 1, 5, 4, 2, 4, 1])   d = 'eaiuo'   p = '*'   for a in range(arr[arr <= 3].size):       p = p + d[a] * (arr == a).sum() + '/  '", "completion": "Este código imprime una serie de caracteres '*' seguida de caracteres de la cadena 'd' multiplicados por la cantidad de veces que 'a' coincide con elementos en 'arr'.  El bucle for itera a través de los valores de 'a' en el rango [0, 1, 2, 3, 4], que son los índices de los elementos en 'arr' que son menores o iguales a 3 (los valores 3, 2, 1, 2 y 1).    Para cada valor de 'a', se agrega un carácter '*' seguido de caracteres de 'd' multiplicados por la cantidad de veces que 'a' aparece en 'arr'.    Aquí está el proceso paso a paso:    a = 0: '*' + 'e' * 0 (no hay elementos igual a 0) + '/  ' = '*'    a = 1: '*' + 'a' * 2 (hay dos elementos igual a 1 en 'arr') + '/  ' = '*aa/  '    a = 2: '*aa/  ' + 'i' * 2 (hay dos elementos igual a 2 en 'arr') + '/  ' = '*aa/  ii/  '    a = 3: '*aa/  ii/  ' + 'u' * 1 (hay un elemento igual a 3 en 'arr') + '/  ' = '*aa/  ii/  u/  '    a = 4: '*aa/  ii/  u/  ' + 'o' * 0 (no hay elementos igual a 4) + '/  ' = '*aa/  ii/  u/  '    Por lo tanto, el resultado impreso será:    '*aa/  ii/  u/  '"}
{"prompt": "Indique la salida por pantalla del siguiente código. Justifique su respuesta.   letters = np.array(['A','Z','P','B','E','R','O','M','B','A','C','D','Q','O'])   indexes = np.array([54, 23, 60, 13, 29, 65, 31, 23, 30, 99, 19, 89, 10, 56])   nl = letters[indexes >= 30]   res = {}   for x in nl:       res[x] = res.get(x, 0) + 1   print(res)", "completion": "Este código crea un diccionario 'res' y realiza una serie de operaciones en base a los valores de 'letters' y 'indexes'. Primero, filtra los elementos de 'letters' donde los valores correspondientes en 'indexes' son mayores o iguales a 30 y almacena estos elementos en 'nl'. Luego, itera sobre cada elemento en 'nl' y actualiza el diccionario 'res'.    Aquí está el proceso paso a paso:    nl = ['A' 'P' 'R' 'O' 'B' 'A' 'D' 'O']    res = {}    Iteración 1: x = 'A', res['A'] = res.get('A', 0) + 1 = 0 + 1 = 1    Iteración 2: x = 'P', res['P'] = res.get('P', 0) + 1 = 0 + 1 = 1    Iteración 3: x = 'R', res['R'] = res.get('R', 0) + 1 = 0 + 1 = 1    Iteración 4: x = 'O', res['O'] = res.get('O', 0) + 1 = 0 + 1 = 1    Iteración 5: x = 'B', res['B'] = res.get('B', 0) + 1 = 0 + 1 = 1    Iteración 6: x = 'A', res['A'] = res.get('A', 0) + 1 = 1 + 1 = 2    Iteración 7: x = 'D', res['D'] = res.get('D', 0) + 1 = 0 + 1 = 1    Iteración 8: x = 'O', res['O'] = res.get('O', 0) + 1 = 1 + 1 = 2    El resultado final del diccionario 'res' es: {'A': 2, 'P': 1, 'R': 1, 'O': 2, 'B': 1, 'D': 1}    Por lo tanto, la salida por pantalla será:    {'A': 2, 'P': 1, 'R': 1, 'O': 2, 'B': 1, 'D': 1}"}
